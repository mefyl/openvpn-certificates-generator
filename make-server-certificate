#!/usr/bin/env python3

import os

import argparse
parser = argparse.ArgumentParser(
  description = 'create authority and server certificates')
parser.add_argument(
  'email', metavar = 'EMAIL', type = str,
  help = 'contact email for the authority')
parser.add_argument(
  'country', metavar = 'COUNTRY', type = str,
  help = 'two letters country name')
parser.add_argument(
  'locality', metavar = 'LOCALITY', type = str,
  help = 'hometown')
parser.add_argument(
  'organization', metavar = 'ORGANIZATION', type = str,
  help = 'company name')
parser.add_argument(
  'commonName', metavar = 'COMMONNAME', type = str,
  help = 'server FQDN')
args = parser.parse_args()

try:
  os.makedirs('ca')
except FileExistsError:
  pass
try:
  os.makedirs('server')
except FileExistsError:
  pass

with open('ca/index.txt', 'w'):
  pass

with open('ca/ca-sign.cnf', 'w') as f:
  params = {
    'root': os.getcwd(),
  }
  print('''\
# This configuration file is used by the 'ca' command, to create signed certificates.
[ ca ]
default_ca              = CA_default            # The default ca section

[ CA_default ]
dir                     = %(root)s/ca           # Where everything is kept
certs                   = $dir/                 # Where the issued certs are kept
crl_dir                 = $dir/                 # Where the issued crl are kept
new_certs_dir           = $dir/                 # default place for new certs

private_key             = $dir/ca.key           # The private key
certificate             = $dir/ca.crt           # The CA root certificate
database                = $dir/index.txt        # List of signed certificates
serial                  = $dir/serial           # The current serial number
crlnumber               = $dir/crlnumber        # the current crl number
crl                     = $dir/crl.pem          # The current CRL
RANDFILE                = $dir/.rand            # private random number file

unique_subject          = no                    # allow multiple certificates with same subject.
default_md              = sha1                  # Use hash algorithm specified in the request
default_days            = 730                   # client certificates last 2 years
default_crl_days        = 30                    # How often clients should download the CRL

#x509_extensions         = X509_ca               # The x509 extensions for the root certificate
#x509_extensions         = X509_server           # The x509 extensions for a server certificate
x509_extensions         = X509_client           # The x509 extensions for a client certificate

# These options control what fields from the distinguished name to show before signing.
# They are required to make sure all fields are shown.
name_opt                = ca_default            # Subject Name options
cert_opt                = ca_default            # Certificate field options

copy_extensions         = copy                  # Accept requested extensions

policy                  = policy_dn

[ X509_ca ]
# X509v3 extensions for the root certificate
basicConstraints        = CA:TRUE
nsCertType              = sslCA                 # restrict the usage
keyUsage                = keyCertSign, cRLSign  # restrict the usage
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always,issuer:always
#subjectAltName          = email:move            # Move email address from DN to extensions
#crlDistributionPoints   = URI:http://www.example.com/example_ca.crl

[ X509_server ]
# X509v3 extensions for server certificates
basicConstraints        = CA:FALSE
nsCertType              = server                # restrict the usage
keyUsage                = digitalSignature, keyEncipherment
extendedKeyUsage        = serverAuth            # restrict the usage
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid,issuer
#subjectAltName          = email:move            # Move email address from DN to extensions
#crlDistributionPoints   = URI:http://www.example.com/example_ca.crl

[ X509_client ]
# X509v3 extensions for client certificates
basicConstraints        = CA:FALSE
nsCertType              = client                # restrict the usage
keyUsage                = digitalSignature      # restrict the usage
extendedKeyUsage        = clientAuth            # restrict the usage
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid,issuer
#subjectAltName          = email:move            # Move email address from DN to extensions
#crlDistributionPoints   = URI:http://www.example.com/example_ca.crl

[ policy_dn ]
countryName             = supplied              # required parameter, any value allowed
stateOrProvinceName     = optional
localityName            = optional
organizationName        = match                 # required, and must match root certificate
organizationalUnitName  = optional
commonName              = supplied              # required parameter, any value allowed
emailAddress            = optional              # email in DN is deprecated, use subjectAltName
''' % params, file = f)

params = {
  'commonName': args.commonName,
  'country': args.country,
  'email': args.email,
  'locality': args.locality,
  'organization': args.organization,
}

with open('ca/ca.cnf', 'w') as f:
  print('''\
# This configuration file is used by the 'req' command when the root certificates is created.
[ req ]
default_bits            = 2048                  # default strength of client certificates
default_md              = sha1
encrypt_key             = yes                   # "no" is equivalent to -nodes
prompt                  = no
string_mask             = utf8only
distinguished_name      = ca_distinguished_name     # root certificate name
req_extensions          = req_cert_extensions
# attributes              = req_attributes

[ ca_distinguished_name ]
# root certificate name
countryName             = %(country)s
localityName            = %(locality)s
organizationName        = %(organization)s
commonName              = %(organization)s-CA

[ req_cert_extensions ]
subjectAltName          = email:%(email)s
''' % params, file = f)

import subprocess
subprocess.check_call(
['openssl', 'req', '-new',
 '-config', 'ca/ca.cnf',
 '-keyout', 'ca/ca.key',
 '-out', 'ca/ca.req'])
subprocess.check_call(
  ['openssl',
   'ca', '-config', 'ca/ca-sign.cnf',
   '-extensions', 'X509_ca',
   '-days', '3650',
   '-create_serial', '-selfsign',
   '-keyfile', 'ca/ca.key',
   '-in', 'ca/ca.req',
   '-out', 'ca/ca.crt'])
os.chmod('ca/ca.key', 0o400)
subprocess.check_call(
  ['openssl', 'dhparam', '-out', 'server/dh2048.pem', '2048'])

with open('server/server.cnf', 'w') as f:
  print('''\
# This configuration file is used by the 'req' command when the server certificate is created.
[ req ]
default_bits            = 2048
default_md              = sha1
encrypt_key             = no
prompt                  = no
string_mask             = utf8only
distinguished_name      = server_distinguished_name
req_extensions          = req_cert_extensions
# attributes              = req_attributes

[ server_distinguished_name ]
countryName             = %(country)s
localityName            = %(locality)s
organizationName        = %(organization)s
commonName              = %(commonName)s
emailAddress            = %(email)s

[ req_cert_extensions ]
nsCertType              = server
subjectAltName          = email:%(email)s
''' % params, file = f)

subprocess.check_call(
  ['openssl', 'req', '-new', '-config', 'server/server.cnf',
   '-keyout', 'server/server.key', '-out', 'server/server.req'])
os.chmod('server/server.key', 0o400)
subprocess.check_call(
  ['openssl', 'ca', '-config', 'ca/ca-sign.cnf',
   '-extensions', 'X509_server',
   '-in', 'server/server.req', '-out', 'server/server.crt'])

with open('params.pickle', 'wb') as f:
  import pickle
  pickle.dump(params, f)
